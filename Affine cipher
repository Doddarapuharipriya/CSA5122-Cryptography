#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_LENGTH 26

int modInverse(int a, int m);
int gcd(int a, int b);
char* affine_decrypt(const char* ciphertext, int a, int b);

int main() {
    char ciphertext[1000];
    int a, b;

    printf("Enter ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    printf("Enter coefficients a and b (space-separated): ");
    scanf("%d %d", &a, &b);
 
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    char* plaintext = affine_decrypt(ciphertext, a, b);

    printf("Decrypted text: %s\n", plaintext);

    free(plaintext);

    return 0;
}
 
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return 1;
}
 
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

char* affine_decrypt(const char* ciphertext, int a, int b) {
    int ciphertext_length = strlen(ciphertext);
    char* plaintext = (char*)malloc(ciphertext_length + 1);

    int a_inverse = modInverse(a, ALPHABET_LENGTH);

    for (int i = 0; i < ciphertext_length; i++) {
        if (isalpha(ciphertext[i])) {
            char offset = islower(ciphertext[i]) ? 'a' : 'A';
            plaintext[i] = ((a_inverse * ((ciphertext[i] - offset) - b + ALPHABET_LENGTH)) % ALPHABET_LENGTH) + offset;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[ciphertext_length] = '\0';

    return plaintext;
}
