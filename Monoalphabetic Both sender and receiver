#include <stdio.h>
#include <stdlib.h>
#include <astring.h>
#include <ctype.h>

#define ALPHABET_LENGTH 26

char* encrypt_monoalphabetic(const char* plaintext, const char* key);
char* decrypt_monoalphabetic(const char* ciphertext, const char* key);

int main() {
    char plaintext[1000];
    char key[ALPHABET_LENGTH];

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter key (permutation of the alphabet): ");
    fgets(key, sizeof(key), stdin);

    
    plaintext[strcspn(plaintext, "\n")] = '\0';
    key[strcspn(key, "\n")] = '\0';
 
    for (int i = 0; i < ALPHABET_LENGTH; i++) {
        key[i] = toupper(key[i]);
    }

    char* ciphertext = encrypt_monoalphabetic(plaintext, key);
    char* decrypted_text = decrypt_monoalphabetic(ciphertext, key);

    printf("Encrypted text: %s\n", ciphertext);
    printf("Decrypted text: %s\n", decrypted_text);

    free(ciphertext);
    free(decrypted_text);

    return 0;
}

char* encrypt_monoalphabetic(const char* plaintext, const char* key) {
    int plaintext_length = strlen(plaintext);
    char* ciphertext = (char*)malloc(plaintext_length + 1);

    for (int i = 0; i < plaintext_length; i++) {
        if (isalpha(plaintext[i])) {
            char offset = islower(plaintext[i]) ? 'a' : 'A';
            int index = plaintext[i] - offset;
            ciphertext[i] = key[index];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[plaintext_length] = '\0';

    return ciphertext;
}

char* decrypt_monoalphabetic(const char* ciphertext, const char* key) {
    int ciphertext_length = strlen(ciphertext);
    char* plaintext = (char*)malloc(ciphertext_length + 1);

    for (int i = 0; i < ciphertext_length; i++) {
        if (isalpha(ciphertext[i])) {
            char offset = islower(ciphertext[i]) ? 'a' : 'A';
            for (int j = 0; j < ALPHABET_LENGTH; j++) {
                if (key[j] == ciphertext[i]) {
                    plaintext[i] = j + offset;
                    break;
                }
            }
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[ciphertext_length] = '\0';

    return plaintext;
}
