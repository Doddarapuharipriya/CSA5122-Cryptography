#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 2

// Function to encrypt a message using the Hill cipher
void encrypt_hill_cipher(const char* message, int key[MATRIX_SIZE][MATRIX_SIZE]) {
    int message_length = strlen(message);
    int message_vector[MATRIX_SIZE][1];
    int result_vector[MATRIX_SIZE][1];

    // Convert the message to uppercase and remove non-alphabetic characters
    char sanitized_message[1000];
    int index = 0;
    for (int i = 0; i < message_length; i++) {
        if (isalpha(message[i])) {
            sanitized_message[index++] = toupper(message[i]);
        }
    }
    sanitized_message[index] = '\0';

    // Pad the message with 'X' if necessary to make its length a multiple of MATRIX_SIZE
    while (strlen(sanitized_message) % MATRIX_SIZE != 0) {
        sanitized_message[index++] = 'X';
    }
    sanitized_message[index] = '\0';

    // Convert the message to numerical representation
    for (int i = 0; i < strlen(sanitized_message); i += MATRIX_SIZE) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            message_vector[j][0] = sanitized_message[i + j] - 'A';
        }

        // Multiply the key matrix with the message vector
        for (int j = 0; j < MATRIX_SIZE; j++) {
            result_vector[j][0] = 0;
            for (int k = 0; k < MATRIX_SIZE; k++) {
                result_vector[j][0] += key[j][k] * message_vector[k][0];
            }
            result_vector[j][0] %= 26; // Take modulo 26 to ensure result is in the range [0, 25]
        }

        // Print the encrypted characters
        for (int j = 0; j < MATRIX_SIZE; j++) {
            printf("%c", result_vector[j][0] + 'A');
        }
    }
    printf("\n");
}

int main() {
    const char* message = "meet me at the usual place at ten rather than eight oclock";
    int key[MATRIX_SIZE][MATRIX_SIZE] = {{9, 4}, {5, 7}};

    printf("Original message: %s\n", message);
    printf("Encrypted message: ");
    encrypt_hill_cipher(message, key);

    return 0;
}
