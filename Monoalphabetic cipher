#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_LENGTH 26

char* encrypt(char *plaintext, char *key);
char* decrypt(char *ciphertext, char *key);

int main() {
    char plaintext[1000];
    char key[ALPHABET_LENGTH + 1];

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
 
    plaintext[strcspn(plaintext, "\n")] = '\0';
    key[strcspn(key, "\n")] = '\0';
 
    for (int i = 0; i < ALPHABET_LENGTH; i++) {
        key[i] = toupper(key[i]);
    }

    char *ciphertext = encrypt(plaintext, key);
    char *decryptedText = decrypt(ciphertext, key);

    printf("Encrypted text: %s\n", ciphertext);
    printf("Decrypted text: %s\n", decryptedText);

    free(ciphertext);
    free(decryptedText);

    return 0;
}

char* encrypt(char *plaintext, char *key) {
    char *ciphertext = strdup(plaintext);
    int i;

    for (i = 0; i < strlen(plaintext); i++) {
        if (isalpha(plaintext[i])) {
            char offset = islower(plaintext[i]) ? 'a' : 'A';
            int index = plaintext[i] - offset;
            ciphertext[i] = key[index];
        }
    }

    return ciphertext;
}

char* decrypt(char *ciphertext, char *key) {
    char *decryptedText = strdup(ciphertext);
    int i, j;

    for (i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            char offset = islower(ciphertext[i]) ? 'a' : 'A';
            for (j = 0; j < ALPHABET_LENGTH; j++) {
                if (key[j] == ciphertext[i]) {
                    decryptedText[i] = j + offset;
                    break;
                }
            }
        }
    }

    return decryptedText;
}
